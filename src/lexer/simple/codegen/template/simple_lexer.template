#=== START OF ENVIRONEMNT SETUP ===#
{{{:env}}}
#===   END OF ENVIRONEMNT SETUP ===#

#=== START OF CODE BLOCKS DEFINED IN LEXER (INSERTED IN ORDER OF DEFINITION)===#
{{#:codeblocks}}
{{{.}}}
{{^.[end]}}

{{/.[end]}}
{{/:codeblocks}}
#===   END OF CODE BLOCKS DEFINED IN LEXER (INSERTED IN ORDER OF DEFINITION)===#

#=== START OF TOKENS RETURNED BY LEXER ACTIONS ===#
{{#:tokens}}
#<<<: DECL {{:name}} :>>>#
struct {{:name}} <: LexerToken
  tag::Symbol
  values::Dict
end

function {{:name}}(;{{#arguments}}{{:name}}::{{:type}}, {{/arguments}})::{{:name}}
  return {{:name}}(
    :{{:name}},
    Dict({{#arguments}}:{{:name}} => {{:name}},{{/arguments}})
  )
end
#<<<: EODL {{:name}} :>>>#
{{^.[end]}}

{{/.[end]}}
{{/:tokens}}
#===   END OF TOKENS RETURNED BY LEXER ACTIONS ===#

#=== START OF ACTIONS ===#
{{#:actions}}
#<<<: {{{:pattern}}} >>>#
function action{{#:counter}}{{/:counter}}()::Union{LexerToken, Any}
  {{{:body}}}
end

#<<< PATTERN TO ACTION FUNCTION MAPPINGS >>>#{{/:actions}}{{#:reset_counter}}{{/:reset_counter}}
const PATTERN_TO_ACTION = Dict(
  {{#:actions}}
  r"{{{:pattern}}}" => action{{#:counter}}{{/:counter}}{{^.[end]}}, {{/.[end]}}
  {{/:actions}}
)
#===   END OF ACTIONS ===#

#=== START OF TOKENIZE LOOP ===#
const ACTION_PATTERNS = [
  {{#:actions}}
  r"{{{:pattern}}}"{{^.[end]}}, {{/.[end]}}
  {{/:actions}}
]

{{{:tokenize}}}
#===   END OF TOKENIZE LOOP ===#

#=== START OF MAIN FUNCTION ===#
{{{:main}}}
#===   END OF MAIN FUNCTION ===#
