#= Definitions section =#

#= Code block inserted at the beginning of the generated file =#
%{
  println("Code in definitions :o")
%}

#= Token definitions =#
%token PLUS "+"
%token MINUS "-"
%token TIMES "*"
%token DIVIDE "/"
%token LPAREN "("
%token RPAREN ")"
%token END
%token NUMBER

#= Returned types =#
%type <Int> start
%type <Int> expr
%type <Vector{Int}> vec
%%
#= Productions =#
%start start
start -> expr END     :{ println($1)            }:
       | %empty       :{ println("Empty input") }:
expr -> expr "+" expr :{ $$ = $1 + $3           }:
      | expr "-" expr :{ $$ = $1 - $3           }:
      | expr "*" expr :{ $$ = $1 * $3           }:
      | expr "/" expr :{ $$ = $1 / $3           }:
      | "(" expr ")"  :{ $$ = $2                }:
      | NUMBER        :{ $$ = $1.value          }:
%%

function factorial(n::Int)::Int
  return n * factorial(n - 1)
end

function __PAR__at_end() # Overloaded JLPG function
  println("Code at the end :o")
  return 0
end
